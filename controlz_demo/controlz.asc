// controlz module script

  //  MIT License
  //
  //  Copyright (c) 2024 Dualnames, Ã‰rico Vieira Porto
  //
  //  Permission is hereby granted, free of charge, to any person obtaining a copy
  //  of this software and associated documentation files (the "Software"), to deal
  //  in the Software without restriction, including without limitation the rights
  //  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  //  copies of the Software, and to permit persons to whom the Software is
  //  furnished to do so, subject to the following conditions:
  //
  //  The above copyright notice and this permission notice shall be included in all
  //  copies or substantial portions of the Software.
  //
  //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  //  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  //  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  //  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  //  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  //  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  //  SOFTWARE.
  
#define DEFAULT_BLOCKING_HEIGHT 5

int _cz_frame;

int _cz_c_frame[];
int _cz_c_cyclewait[];
int _cz_c_countstopped[];
bool _cz_c_ismoving[];

// fix for ags 3.4.3.1
#ifndef SCRIPT_API_v3507
int GetWalkableAreaAtRoom(int room_x, int room_y)
{ 
  int screen_x = room_x-GetViewportX();
  int screen_y = room_y-GetViewportY();
  return GetWalkableAreaAt(screen_x, screen_y);  
}
#endif

// true if a point is inside a rectangle
bool _IsPointInsideRectangle(int p_x, int p_y,  int r_x, int r_y, int r_w, int r_h)
{
  return (p_x >= r_x && p_x <= r_x + r_w && p_y >= r_y && p_y <= r_y + r_h);
}

bool _IsPointBlockedByCharacter(Character* other, int x, int y)
{
  int r_w, r_h, r_x, r_y;
  ViewFrame* vf = Game.GetViewFrame(other.View, other.Loop, other.Frame);
  
  //  The blocking height determines how large of a blocking rectangle  
  // the character exerts to stop other characters walking through it. 
  //  If this is set to 0 (the default), then the blocking rectangle is 
  // automatically calculated to be the character's width, and 5 pixels high.
  if(other.BlockingWidth == 0) r_w = Game.SpriteWidth[vf.Graphic];
  else r_w = other.BlockingWidth;
  
  if(other.BlockingHeight == 0) r_h = DEFAULT_BLOCKING_HEIGHT;
  else r_h = other.BlockingHeight; 
  
  r_x = other.x - r_w/2;
  r_y = other.y - r_h + 1; //this plus 1 fixes something I don't understand yet when actually running, use ctrl+A to verify
  return _IsPointInsideRectangle( x, y, r_x, r_y, r_w, r_h);  
}

bool _IsWallForCharacter(Character* c, int x, int y)
{
  for(int i=0; i<Game.CharacterCount; i++) // Check if any other characters are blocking the point
  {
    Character* other = character[i];
    if(other != c && c.Room == other.Room && c.Solid && other.Solid &&
       _IsPointBlockedByCharacter(other, x, y))
    {
      return true;
    }
  }
  return GetWalkableAreaAtRoom(x, y) == 0;
}

void _ChangeCharacterFrame(Character* c, int view, int loop, int frame)
{
  bool frame_same = frame == c.Frame;
  c.LockViewFrame(view, loop, frame); // actually change the frame
  if(frame_same) return;
  ViewFrame* vf = Game.GetViewFrame(view, loop, frame);
  if(vf == null) return;
  AudioClip* ac = vf.LinkedAudio;
  if(ac == null) return;
  ac.Play(eAudioPriorityHigh);
}

bool _ReleaseCharacterIfAllButtonsOff(Character* c, bool down, bool left, bool right, bool up)
{
  if(!(down || left || right || up))
  {
    if(_cz_c_countstopped[c.ID]<1)
    {
      _cz_c_ismoving[c.ID] = false;
      _cz_c_countstopped[c.ID]++;
    }
    else 
    {
      if(_cz_c_countstopped[c.ID]<2)
      {
        _cz_c_countstopped[c.ID]++;
        _cz_c_ismoving[c.ID] = false;
        c.UnlockView();
        return true;
      }
    }
  } 
  else 
  {
    _cz_c_countstopped[c.ID] = 0;  
  }
  return false;
}

Point* _GetNewIntendedPosition(Character* c, bool down, bool left, bool right, bool up)
{
  Point* p = new Point;
  
  int setX = c.x;
  int setY = c.y;
  int walkSpeedY = c.WalkSpeedY;

  if(c.MovementLinkedToAnimation)
  {
    if (left) setX -=c.WalkSpeedX;
    if (right)setX +=c.WalkSpeedX;
    if (left||right && walkSpeedY>1) walkSpeedY=walkSpeedY/2;
    if (up) setY -=walkSpeedY;
    if (down) setY+=walkSpeedY;
  } 
  else
  {
    if (left) setX -= 2*c.WalkSpeedX-1;
    if (right) setX += 2*c.WalkSpeedX-1;
    if (left||right)
    {  
      if (up) setY -= walkSpeedY;
      if (down) setY+= walkSpeedY;
    }
    else 
    {
      if (up) setY -= walkSpeedY*2;
      if (down) setY+= walkSpeedY*2;
    }
  }
  
  p.x = setX;
  p.y = setY;
  
  return p;
}

int _GetNewLoop(Character* c, bool down, bool left, bool right, bool up)
{
  if (left)
  {
    if(c.DiagonalLoops)
    {
      if (up) return 7;
      else if (down) return 6;
      else return 1; 
    }
    else 
    {
      return 1;
    }
  }
  else if (right) 
  {
    if(c.DiagonalLoops)
    {
      if (up) return 5;
      else if (down) return 4;
      else return 2;
    }
    else
    {
      return 2;
    }
  }
  else if (up) 
  {
    return 3;
  }
  else if (down) 
  {
    return 0;
  }
  return -1; // should not reach here
}

// ----------------------------------------------------------------------
// --------------- controlz module public interface ---------------------
// ----------------------------------------------------------------------

MovingState Controlz(Character* c, bool down, bool left, bool right, bool up)
{
  if (c == null || c.View != c.NormalView)
  {
    return eControlzJustInvalid;
  }
  
  if (c.MovementLinkedToAnimation && (_cz_frame % c.AnimationSpeed != 0))
  {
    return _cz_c_ismoving[c.ID];
  }

  // Check if character should stop moving
  if(_ReleaseCharacterIfAllButtonsOff(c, down,  left,  right, up))
  {
    return eControlzJustReleased;    
  }

  Point* p = _GetNewIntendedPosition(c, down, left, right, up);
  int setX = p.x;
  int setY = p.y;

  if (!(down || left || right || up))
  {
    if (_cz_c_frame[c.ID]!=1)
    {
      _cz_c_frame[c.ID]=1;
      _ChangeCharacterFrame(c, c.NormalView, c.Loop, _cz_c_frame[c.ID]);
    }
    return _cz_c_ismoving[c.ID];
  }

  int loops = _GetNewLoop(c, down, left, right, up);

  // Return early if the character is already moving or there is a wall at the character's current position
  if (_IsWallForCharacter(c, c.x, c.y) || c.Moving )
  {
    return _cz_c_ismoving[c.ID];
  }

  if (loops!=-1)
  { // Update the character's position and view if the character is moving
    int pdx=c.x;
    int pdy=c.y;  

    if (_IsWallForCharacter(c, setX, setY))
    { // would run into a wall, try the x or y axis separately
      if (_IsWallForCharacter(c, setX, c.y))
      {
        if (!_IsWallForCharacter(c, c.x, setY))
        {
          c.y=setY;
        }
      }
      else
      {
        c.x=setX;
      }
    } 
    else
    {
      c.x=setX;
      c.y=setY;
    }

    bool moving = c.x!=pdx || c.y!=pdy;
    bool was_moving = _cz_c_ismoving[c.ID];

    c.Loop=loops;
    if(c.MovementLinkedToAnimation)
    {
      _cz_c_frame[c.ID]++;
      if (_cz_c_frame[c.ID]>=Game.GetFrameCountForLoop(c.NormalView, loops)-1)
        _cz_c_frame[c.ID]=1;
      _ChangeCharacterFrame(c, c.NormalView, loops, _cz_c_frame[c.ID]);
      _cz_c_ismoving[c.ID] = moving;
    }
    else 
    {
      _cz_c_cyclewait[c.ID]++;
      if (_cz_c_cyclewait[c.ID]>c.AnimationSpeed)
      {
        _cz_c_frame[c.ID]++;
        if (_cz_c_frame[c.ID]>=Game.GetFrameCountForLoop(c.NormalView, loops)-1)
          _cz_c_frame[c.ID]=1;
        _ChangeCharacterFrame(c, c.NormalView, loops, _cz_c_frame[c.ID]);            
        _cz_c_cyclewait[c.ID]=0;
        _cz_c_ismoving[c.ID] = moving;
      }
    }
    
    if(!moving)
    {
      return eControlzWalkingInPlace;
    }
  }
  return _cz_c_ismoving[c.ID];
}


// ----------------------------------------------------------------------
// ------------ internal things we run in global handlers ---------------
// ----------------------------------------------------------------------

void game_start()
{
  _cz_c_frame = new int[Game.CharacterCount];
  _cz_c_countstopped = new int[Game.CharacterCount];
  _cz_c_cyclewait = new int[Game.CharacterCount];  
  _cz_c_ismoving = new bool[Game.CharacterCount];  
  
  // Characters are normally created with DiagonalLoops set to true
  // But they only have 4 views. So we set it to false when appropriate.
  int i=0;  
  while(i<Game.CharacterCount)
  {  
    if((character[i].NormalView > 0) && (Game.GetLoopCountForView(character[i].NormalView) < 5))
    {
      character[i].DiagonalLoops = false;  
    }
    i++;
  }
}

void repeatedly_execute_always()
{
  if(IsGamePaused() == 1)
  {
    return;  
  }
  _cz_frame++;
}